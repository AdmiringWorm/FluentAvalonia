The ThemeManager can help in switching themes at runtime. The ThemeManager has no dependency to any window (though it requires application lifetime to be IClassicDesktopApplicationLifetime), thus can be placed in a ViewModel if chosen.
For optimal results, FluentAvalonia looks best with the system applied accents, and the Segoe UI font, which unfortunately is only available on Windows (by default). The theme manager can help manage this to ensure the Default FontFamily is changed to Segoe UI if the platform in windows.

To use, declare the ThemeManager as with either constructor
NOTE: App.xaml must be configured as defined on the HomePage for this to work
//Constructor 1 - Uses a default theme, if on Windows, it asks the system (Windows 10 1809 and later), otherwise defaults to light

var tm = new ThemeManager(true /*useWinSysAccent*/, true /*useWinDefFont*/, true /*includeWindowsTitleBar*/);
tm.Refresh();

//Constructor 2 - Uses a specified theme

var tm = new ThemeManager(FluentThemeMode.Dark /*preferredTheme*/, true /*useWinSysAccent*/, true /*useWinDefFont*/, true /*includeWindowsTitleBar*/);
tm.Refresh();

//The parameters are as follows
PreferredTheme - the desired theme, either Light or Dark
UseWinSysAccent - True to use and get the Windows System Accent color
UseWinDefFont - True to replace the primary Font resource ("ContentControlThemeFontFamily") with Segoe UI if on Windows
IncludeWindowsTitleBar - If using Windows 10 1809 or higher, the native windows titlebar will also be included in the theme change. NOTE: this is experimental, and may not always work

Call Refresh to apply the current theme. 

You can also change any property on the ThemeManager, or set custom accent colors if you choose to. Just change the property and call Refresh();
For example, switch from Light -> Dark
tm.PreferredTheme = FluentThemeMode.Dark;
tm.Refresh();

Or to set custom accent colors:
tm.CustomAccentColors = ... //Set the array of 7 colors: Accent, AccentLight1,2,3, AccentDark1,2,3
tm.UseSystemAccentOnWindows = false; //set this to false
tm.Refresh();

How does it work?
The ThemeManager searches the Application Styles for three things, first an instance of the FluentTheme from Avalonia, to switch the base Avalonia Theme. NOTE: it doesn't appear this works at this time, as it doesn't appear FluentTheme listens for changes to the Mode property.

Then it searches an instance of FluentAvaloniaTheme, which holds a ThemeStyles object containing all the FluentAvalonia styles & resources, which looks similar to UWP's/WinUI's ResourceDictionary. 
It then will also look for any other instances of ThemeStyles (including via StyleInclude), so it can also be used for custom theming.


